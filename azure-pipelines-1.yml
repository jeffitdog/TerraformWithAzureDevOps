# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
  - stage: validate
    jobs:
    - job: validate
      continueOnError: false
      steps:
      - task: TerraformInstaller@0
        inputs:
          terraformVersion: '0.12.3'
      - task: TerraformCLI@0
        displayName: Terraform Init
        inputs:
          command: 'init'
          backendType: 'azurerm'
          backendServiceArm: 'AzureDevOps'
          backendAzureRmResourceGroupName: 'IaC'
          backendAzureRmStorageAccountName: 'tfstatefilelocation'
          backendAzureRmContainerName: 'tfstatefile'
          backendAzureRmKey: 'terraform.tfstate'
          allowTelemetryCollection: true
      - task: TerraformCLI@0
        displayName: Terraform Validate
        inputs:
          command: 'validate'
          allowTelemetryCollection: true

      - task: Prisma Cloud IaC Scan@3
        inputs:
          Path: '.'
          prismaCloudService: 'Prisma-Cloud-IaC-Scanning'
          High: '1'
          Medium: '1'
          Low: '1'
          Operator: 'or'
          Tags: 'GitOps'



  - stage: deploy
    jobs:
    - deployment: deploy_terraform
      continueOnError: false
      environment: 'dev'
      strategy:
       runOnce:
         deploy:
            steps:
              - checkout: self
              - task: TerraformInstaller@0
                displayName: 'install'
                inputs:
                  terraformVersion: '0.12.3'
              - task: TerraformCLI@0
                displayName: Terraform Init
                inputs:
                  command: 'init'
                  backendType: 'azurerm'
                  backendServiceArm: 'AzureDevOps'
                  backendAzureRmResourceGroupName: 'IaC'
                  backendAzureRmStorageAccountName: 'tfstatefilelocation'
                  backendAzureRmContainerName: 'tfstatefile'
                  backendAzureRmKey: 'terraform.tfstate'
                  allowTelemetryCollection: true             
              - task: TerraformCLI@0
                inputs:
                  command: 'plan'
                  environmentServiceName: 'AzureDevOps'
                  allowTelemetryCollection: true

              - task: TerraformCLI@0
                inputs:
                  command: 'apply'
                  environmentServiceName: 'AzureDevOps'
                  allowTelemetryCollection: true
